/** Copyright (2005-2008) Schibsted ASA
 *   This file is part of SESAT.
 *
 *   SESAT is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Affero General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   SESAT is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Affero General Public License for more details.
 *
 *   You should have received a copy of the GNU Affero General Public License
 *   along with SESAT.  If not, see <http://www.gnu.org/licenses/>.
**/
options {
  STATIC=false;
  JAVA_UNICODE_ESCAPE=true;
  LOOKAHEAD=2147483647;
}

PARSER_BEGIN(QueryParserImpl)

package no.sesat.search.query.parser;

import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import no.sesat.search.query.*;


/** This class is NOT synchronized. You must use a separate instance for each query.
 *
 * @version $Id$
 * @author <a href="mailto:mick@wever.org>mick</a>
 **/
public final class QueryParserImpl extends AbstractQueryParser{

    public QueryParserImpl(final Context cxt){
        this(new StringReader(cxt.getQueryString()));
        context = cxt;
        //checks Query String is ok
        String qs = cxt.getQueryString();
        qs = numberNeedsTrailingSpace(qs);
        qs = fixFloatingHyphon(qs);

        token_source.SwitchTo(DEFAULT);
//        LOG.setLevel(org.apache.log4j.Level.TRACE);
    }

    public QueryParserImpl(final Context cxt, final int lexicalState){
        this(new StringReader(cxt.getQueryString()));
        context = cxt;
        //checks Query String is ok
        String qs = cxt.getQueryString();
        qs = numberNeedsTrailingSpace(qs);
        qs = fixFloatingHyphon(qs);

        token_source.SwitchTo(lexicalState);
    }

}

PARSER_END(QueryParserImpl)

/** Skip these characters, they are considered "white space"
 * See http://www.unicode.org/charts/ for unicode charts.
 *
 * WARNING!! These ranges are duplicated in QueryParser.java
 *             !! Always update it after any changes here !!
**/

<*>SKIP : {
      " " | "!" | "\""
    | < [ "\u0023"-"\u0027" ] >
    | < [ "\u002a"-"\u002c" ] >
    | < [ "\u002e"-"\u002f" ] >
    | < [ "\u003b"-"\u0040" ] >
    | < [ "\u005b"-"\u0060" ] >
    | < [ "\u007b"-"\u00bf" ] >
    | < [ "\u00d7" ] >
    | < [ "\u00f7" ] >
    | < [ "\u2010"-"\u2015" ] >
}

/* These are the the above skip characters */
/* # % & ' */
/* * + , */
/* . / */
/* ; < = > ? @ */
/* [ \ ] ^ _ ` */
/* ‐ ‑ ‒ – — ― */

<DEFAULT,EMAIL_DISABLED,PHONE_NUMBER_DISABLED,NUMBER_GROUP_DISABLED,QUOTED_WORD_DISABLED>
// https?://([-\\w\\.]+)+(:\\d+)?(/~?([\\w/_\\.]*(\\?\\S+)?)?)?
TOKEN : { <URL: "http"("s")?"://"<WORD>(":"<INTEGER>)?(<URL_WORD>)*(("?"<URL_WORD>)?)*("#"<URL_WORD>)?>
    | <#URL_WORD: (<WORD>|<ENCODED_CHAR>|"-"|"_"|"~"|"/"|"+"|"&")+>
    | <#ENCODED_CHAR: "%"(<DIGIT>|"A"|"a"|"B"|"b"|"C"|"c"|"D"|"d"|"E"|"e"|"F"|"f"){2}>}

<DEFAULT,URL_DISABLED,PHONE_NUMBER_DISABLED,NUMBER_GROUP_DISABLED,QUOTED_WORD_DISABLED>
TOKEN : { <EMAIL: <WORD>"@"<WORD>"."<WORD>> }

// Very generic to match any Internation Phone Number !!
//   TODO deal with optional area codes. eg australian numbers can be written (02) 4878 9336
// number_group_disabled is a super state to phone_number_disabled
<DEFAULT,URL_DISABLED,EMAIL_DISABLED,QUOTED_WORD_DISABLED>
TOKEN : { <PHONE_NUMBER: (("+"|"00"(<PHONE_MIDDLE>)?)?(<DIGIT>(<PHONE_MIDDLE>)?){5,14})" "> }

<DEFAULT,URL_DISABLED,EMAIL_DISABLED,PHONE_NUMBER_DISABLED,QUOTED_WORD_DISABLED>
TOKEN : { <NUMBER_GROUP: ((<DIGIT>)+(" ")+){2,}> }

<DEFAULT,URL_DISABLED,EMAIL_DISABLED,PHONE_NUMBER_DISABLED,NUMBER_GROUP_DISABLED>
TOKEN : { <QUOTED_WORD: "\"" (~["\""])+ "\""> }

<*>TOKEN : {
      <AND: ("AND"|"+")>
    | <OR:  ("OR"|"|")>
    | <NOT: "NOT"|"-">
    | <ANDNOT: ("ANDNOT")>
    | <INTEGER: ((<DIGIT>)+)>
    | <WORD: (<LETTER>|<DIGIT>|<WORD_SYMBOL_PREFIX>)(<LETTER>|<DIGIT>|<WORD_SYMBOL_MIDDLE>)*("*")?>
    | <FIELD_SUFFIX: ":">
        // remember to remove these when constructing the PhoneClause
    | <#PHONE_MIDDLE: ((" ")*<PHONE_SYMBOL>(" ")*)|(" ")+>
    | <#PHONE_SYMBOL: (".")|("-")|("/")>
    | <#WORD_SYMBOL_PREFIX: (".")|("<")|("=")|(">")>
    | <#WORD_SYMBOL_MIDDLE: (".")|<HYPON>|("_")|("+")>
    | <#HYPON: // Different types of hypons, http://www.cs.tut.fi/~jkorpela/dashes.html
        [
            "-",
            "\u2010"-"\u2015",
            "\u207b",
            "\u208b",
            "\u2212"
        ]>
    | <#LETTER:
        [
            "\u0041"-"\u005a",
            "\u0061"-"\u007a",
            "\u00c0"-"\u00d6",
            "\u00d8"-"\u00f6",
            "\u00f8"-"\u200f",
            "\u2016"-"\uffff"
        ]>
    | <#DIGIT:
          [
           "\u0030"-"\u0039",
           "\u0660"-"\u0669",
           "\u06f0"-"\u06f9",
           "\u0966"-"\u096f",
           "\u09e6"-"\u09ef",
           "\u0a66"-"\u0a6f",
           "\u0ae6"-"\u0aef",
           "\u0b66"-"\u0b6f",
           "\u0be7"-"\u0bef",
           "\u0c66"-"\u0c6f",
           "\u0ce6"-"\u0cef",
           "\u0d66"-"\u0d6f",
           "\u0e50"-"\u0e59",
           "\u0ed0"-"\u0ed9",
           "\u1040"-"\u1049"
          ]>
    | <OPENP: "(">
    | <CLOSEP: ")">
}

Clause parse() : {
  Clause clause;
  LOG.info("parsing: "+context.getQueryString());
}{
        (clause = rootPrecedence()) 
 {
        LOG.info("parsing of " + context.getQueryString() + " resulted in: " + clause);
        return clause;
 }
}

/** PRECEDENCES **/

Clause rootPrecedence() :{
    Clause clause;
    enterMethod("rootPrecedence()", token);
}{
    (clause = noPrecedence()) { try{return clause;}finally{exitMethod();} }
 }

Clause noPrecedence() :{
    Clause clause;
    enterMethod("noPrecedence()", token);
}{
    (clause = hiddenDefaultOperation()) { try{return clause;}finally{exitMethod();} }
    |
    (clause = looseJoinPrecedence()) { try{return clause;}finally{exitMethod();} }

}

Clause looseJoinPrecedence() :{
    Clause clause = null;
    Token field = null;
    enterMethod("looseJoinPrecedence()", token);
}{
    // Quotes or phrases take higher precedence than an OrOperation created by ()'s
    ((field=<WORD>)<FIELD_SUFFIX>)(clause = fieldedQuote(field)) {try{return clause;}finally{exitMethod();}}
    |
    (clause = fieldedQuote(null)) { try{ return clause;}finally{exitMethod();}}
    |
    (clause = orOperation()) { try{return clause;}finally{exitMethod();} }
    |
    (clause = strongJoinPrecedence()) { try{return clause;}finally{exitMethod();} }
}

Clause strongJoinPrecedence() :{
    Clause clause;
    enterMethod("strongJoinPrecedence()", token);
}{
    (clause = andOperation()) { try{return clause;}finally{exitMethod();} }
    |
    (clause = leafPrecedence()) { try{return clause;}finally{exitMethod();} }


}

Clause leafPrecedence() :{
    Clause clause;
    enterMethod("leafPrecedence()", token);
}{
    (clause = notOperation()) { try{return clause;}finally{exitMethod();} }
    |
    (clause = andNotOperation()) { try{return clause;}finally{exitMethod();} }
    |
    (clause = leaf()) { try{return clause;}finally{exitMethod();} }
}

/** OPERATIONS **/

DefaultOperatorClause hiddenDefaultOperation() :{
    Clause left,right;
    enterMethod("hiddenDefaultOperation()", token);
}{
    ((left = looseJoinPrecedence())(right = noPrecedence()))
        { try{return context.createDefaultOperatorClause(left,right);}finally{exitMethod();} }
}


AndNotClause andNotOperation() :{
    Clause right;
    enterMethod("andNotOperation()", token);
}{
    (<ANDNOT>(right = noPrecedence())) { try{return context.createAndNotClause(right);}finally{exitMethod();} }
}

Clause orOperation() :{
    Clause left,right;
    Clause clause;
    enterMethod("orOperation()", token);
}{
    ( <OPENP> (clause = hiddenOrOperation()) <CLOSEP>) { try{return clause;}finally{exitMethod();} }
    |
    ( <OPENP> (clause = orOperation()) <CLOSEP>) { try{return clause;}finally{exitMethod();} }
    |
    ((left = strongJoinPrecedence())<OR>(right = looseJoinPrecedence()))
        { try{return context.createOrClause(left,right);}finally{exitMethod();} }
}

AndClause andOperation() :{
    Clause left,right;
    enterMethod("andOperation()", token);
}{
    ((left = leafPrecedence())<AND>(right = strongJoinPrecedence()))
        { try{return context.createAndClause(left,right);}finally{exitMethod();} }
}

AndClause hiddenAndOperation() :{
    Clause left,right;
    enterMethod("hiddenAndOperation()", token);
}{
    ((left = leafPrecedence())(right = hiddenAndOperation()))
        { try{return context.createAndClause(left,right);}finally{exitMethod();} }
    |
    ((left = leafPrecedence())(right = strongJoinPrecedence()))
        { try{return context.createAndClause(left,right);}finally{exitMethod();} }
}

Clause hiddenOrOperation() :{
    Clause left,right;
    enterMethod("hiddenOrOperation()", token);
}{

    // These are the real hidden or operands
    ((left = leafPrecedence())(right = hiddenOrOperation()))
        { try{return context.createOrClause(left,right);}finally{exitMethod();} }
    |
    ((left = looseJoinPrecedence())(right = looseJoinPrecedence()))
        { try{return context.createOrClause(left,right);}finally{exitMethod();} }
    |
    // Not really an OR clause. Just () wrapped around something else. Therefore ignore the ()'s
    (left = leafPrecedence()) { try{return left;}finally{exitMethod();} }

}

NotClause notOperation() :{
    Clause left;
    enterMethod("notOperation()", token);
}{
    (<NOT>(left = leaf()))  { try{return context.createNotClause(left);}finally{exitMethod();} }
}


/** LEAVES **/

Clause leaf() :{
    Token field = null;
    Clause clause, left, right = null;
    enterMethod("leaf()", token);
}{
    // A real field
    ((field=<WORD>)<FIELD_SUFFIX>)(clause = fieldedLeaf(field)) {try{return clause;}finally{exitMethod();}}
    |
    // An accidential field.
    // XXX This could cause problems as it destroys the construction of a right-leaning forests.
    (left = fieldedLeaf(null)<FIELD_SUFFIX>)(right = fieldedLeaf(null))
        {try{return context.createDefaultOperatorClause(left,right);}finally{exitMethod();}}
    |
    ((<FIELD_SUFFIX>)?(clause = fieldedLeaf(null))) {try{return clause;}finally{exitMethod();}}
}


Clause fieldedLeaf(final Token field) :{
    enterMethod("fieldedLeaf()", token);
    Clause clause = null;
}{
    <PHONE_NUMBER>
        {
            try{
                // remove the PHONE_SYMBOL sub-tokens
                final String term = token.image.replaceAll("\\.|-|/| |\\(|\\)","");
                final String f = field == null ? null : field.image;
                final PhoneNumberClause phClause = context.createPhoneNumberClause(term, f);

                // Create a XorClause
                final QueryParserImpl p = new QueryParserImpl(createContext(token.image), PHONE_NUMBER_DISABLED);
                final Clause altClause = p.parse();
                return context.createXorClause(phClause, altClause, XorClause.Hint.PHONE_NUMBER_ON_LEFT);

            }finally{exitMethod();}
        }
    |
    <NUMBER_GROUP>
        {
            try{
                // Remove whitespace
                final String term = token.image.trim().replaceAll(" ","");
                final String f = field == null ? null : field.image;
                final NumberGroupClause orgClause = context.createNumberGroupClause(term, f);

                // Create a XorClause
                final QueryParserImpl p = new QueryParserImpl(createContext(token.image), NUMBER_GROUP_DISABLED);
                final Clause altClause = p.parse();
                return context.createXorClause(orgClause, altClause, XorClause.Hint.NUMBER_GROUP_ON_LEFT);

            }finally{exitMethod();}
        }
    |
    (clause = fieldedQuote(field)) {try{ return clause; }finally{exitMethod();}}
    |
    <WORD>
        {
            try{
                final String f = field == null ? null : field.image;
                return context.createWordClause(token.image, f);

            }finally{exitMethod();}
        }
    |
    <INTEGER>
        {
            try{
                final String f = field == null ? null : field.image;
                return context.createIntegerClause(token.image, f);

            }finally{exitMethod();}
        }
    |
    <URL>
        {
            try{
                final String f = field == null ? null : field.image;
                return context.createUrlClause(token.image, f);

            }finally{exitMethod();}
        }
    |
    <EMAIL>
        {
            try{
                final String f = field == null ? null : field.image;
                return context.createEmailClause(token.image, f);

            }finally{exitMethod();}
        }
}

Clause fieldedQuote(final Token field) :{
    enterMethod("fieldedQuote()", token);
}{
    <QUOTED_WORD>
        {
            try{
                final String f = field == null ? null : field.image;
                final PhraseClause phClause = context.createPhraseClause(token.image, f );

                // Create unphrased query. also strip all operator and skip characters out. SKER4723.
                final String term = token.image
                                        .replaceAll("\"","")
                                        .replaceAll(SKIP_REGEX, " ")
                                        .replaceAll(OPERATOR_REGEX, " ")
                                        .trim();

                try { // if we can parse the content again, then make an xorclause
                    final QueryParserImpl p = new QueryParserImpl(createContext(term), QUOTED_WORD_DISABLED);
                    final Clause altClause = p.parse();
                    return context.createXorClause(phClause, altClause, XorClause.Hint.PHRASE_ON_LEFT);

                }
                catch (ParseException e) {
                    LOG.warn("Parsing content of QUOTED_WORD: " + term, e);
                }

                return phClause;

            }finally{exitMethod();}
        }
}
