/** Copyright (2005-2006) Schibsted SÃ¸k AS **/
options {
  STATIC=false;
  JAVA_UNICODE_ESCAPE=true;
  LOOKAHEAD=2147483647;
}

PARSER_BEGIN(QueryParserImpl)

package no.schibstedsok.front.searchportal.query.parser;

import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import no.schibstedsok.front.searchportal.query.*;
import no.schibstedsok.front.searchportal.query.token.TokenEvaluatorFactory;

/** This class is NOT synchronized. You must use a separate instance for each query. 
 *
 * @todo the LOOKAHEAD's can be reduced to one. but how?...
 **/
public final class QueryParserImpl extends AbstractQueryParser{

    public QueryParserImpl(final Context cxt){
        this(new StringReader(cxt.getQueryString()));
        context = cxt;
    }
}

PARSER_END(QueryParserImpl)

/** Skip these characters, they are considered "white space" **/
SKIP : {
    ","
    | "."    
    | "#"
    | " "
    | "\t"
    | "\r"
    | "\n"
}

TOKEN : {
/** Find operators first **/
  <AND: ("AND"|"+")>
| <OR:  ("OR"|"|")>
| <NOT: "NOT">              // choosing to identify "-" as the ANDNOT operator instead of the NOT operator.
| <ANDNOT: ("ANDNOT"|"-")>
/** then leaves **/
| <PHONE_NUMBER: (("+"|"00")"47"(" ")*){0,1}(<DIGIT>(" "){0,1}){8}>
| <ORGANISATION_NUMBER: (<DIGIT>){9}>
| <INTEGER: ((<DIGIT>)+)>
| <WORD: ((<LETTER>|<DIGIT>)+)>
| <QUOTED_WORD: "\"" (<WORD>|(" ")+)* "\"">
| <#LETTER:
/** UNICODE Characters **/
    [
        "\u0041"-"\u005a",
        "\u0061"-"\u007a",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff"
    ]
    >
| < #DIGIT:                                       // unicode digits
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

Clause parse() : { 
  Clause clause;
  LOG.info("parsing: "+context.getQueryString());
}{
        (clause = rootPrecedence()) {return clause;}
}

/** PRECEDENCES **/

Clause rootPrecedence() :{
    Clause clause;
    enterMethod("rootPrecedence()");
}{
    (clause = noPrecedence()) { try{return clause;}finally{exitMethod();} }
}

Clause noPrecedence() :{
    Clause clause;
    enterMethod("noPrecedence()");
}{
    (clause = hiddenOrOperation()) { try{return clause;}finally{exitMethod();} }
    |
    (clause = looseJoinPrecedence()) { try{return clause;}finally{exitMethod();} }
    
}

Clause looseJoinPrecedence() :{
    Clause clause;
    enterMethod("looseJoinPrecedence()");
}{
    (clause = orOperation()) { try{return clause;}finally{exitMethod();} }  
    |
    (clause = strongJoinPrecedence()) { try{return clause;}finally{exitMethod();} } 
}

Clause strongJoinPrecedence() :{
    Clause clause;
    enterMethod("strongJoinPrecedence()");
}{
    (clause = andOperation()) { try{return clause;}finally{exitMethod();} }
    |
    (clause = leafPrecedence()) { try{return clause;}finally{exitMethod();} }
    

}

Clause leafPrecedence() :{
    Clause clause;
    enterMethod("leafPrecedence()");
}{
    (clause = notOperation()) { try{return clause;}finally{exitMethod();} }
    |
    (clause = andNotOperation()) { try{return clause;}finally{exitMethod();} }
    | 
    (clause = leaf()) { try{return clause;}finally{exitMethod();} }
}

/** OPERATIONS **/

OrClause hiddenOrOperation() :{
    Clause left,right;
    enterMethod("hiddenOrOperation()");
}{
    ((left = looseJoinPrecedence())(right = noPrecedence())) { try{return context.createOrClause(left,right);}finally{exitMethod();} }
}


AndNotClause andNotOperation() :{
    Clause left,right;
    enterMethod("andNotOperation()");
}{
    (<ANDNOT>(left = looseJoinPrecedence())) { try{return context.createAndNotClause(left);}finally{exitMethod();} }
}  

OrClause orOperation() :{
    Clause left,right;
    enterMethod("orOperation()");
}{
    ((left = strongJoinPrecedence())<OR>(right = looseJoinPrecedence())) { try{return context.createOrClause(left,right);}finally{exitMethod();} }
}

AndClause andOperation() :{
    Clause left,right;
    enterMethod("andOperation()");
}{
    ((left = leafPrecedence())<AND>(right = strongJoinPrecedence())) { try{return context.createAndClause(left,right);}finally{exitMethod();} }
}

NotClause notOperation() :{
    Clause left;
    enterMethod("notOperation()");
}{
    (<NOT>(left = leaf()))  { try{return context.createNotClause(left);}finally{exitMethod();} }
}


/** LEAVES **/

Clause leaf() :{
    Token field = null;
    Clause clause = null;
    enterMethod("leaf()");
}{

    (field=<WORD>":")(clause = fieldedLeaf(field)) {try{return clause;}finally{exitMethod();}}
    |
    (clause = fieldedLeaf(null)) {try{return clause;}finally{exitMethod();}}
}
    

Clause fieldedLeaf(final Token field) :{
    enterMethod("fieldedLeaf()");
}{
    (<PHONE_NUMBER>) 
            { 
                // Create a "Possibility" OrClause
                // it might not be a phone number... // XXX Could this be done with parser logic...
                try{
                    final PhoneNumberClause phClause = context.createPhoneNumberClause(token.image, field == null ? null : field.image);
                    Clause prevClause = null;
                    final String[] numbers = token.image.split(" ");
                    for(int i = 0; i < numbers.length; ++i){
                        final String number = numbers[i];
                        final LeafClause leafClause = number.indexOf("+") <0
                                ? (LeafClause)context.createIntegerClause(number, field == null ? null : field.image)
                                : (LeafClause)context.createWordClause(number, field == null ? null : field.image);
                        if( prevClause != null ){
                            final OrClause orClause = context.createOrClause(prevClause,leafClause);
                            prevClause = orClause;
                        }else{
                            prevClause = leafClause;
                        }
                    }
                    return context.createOrClause(phClause, prevClause);
                }finally{exitMethod();}
            }
    | 
    (<ORGANISATION_NUMBER>) 
            { 
                // Create a a "Possibility" OrClause
                // it might not be a Organisation number... // XXX Could this be done with parser logic...
                try{
                    final OrganisationNumberClause orgClause = context.createOrganisationNumberClause(token.image, field == null ? null : field.image);
                    Clause prevClause = null;
                    final String[] numbers = token.image.split(" ");
                    for(int i = 0; i < numbers.length; ++i){
                        final String number = numbers[i];
                        final IntegerClause intClause = context.createIntegerClause(number, field == null ? null : field.image);
                        if( prevClause != null ){
                            final OrClause orClause = context.createOrClause(prevClause,intClause);
                            prevClause = orClause;
                        }else{
                            prevClause = intClause;
                        }
                    }
                    return context.createOrClause(orgClause, prevClause);
                }finally{exitMethod();}
            }
    |
    <WORD>
        { 
            try{return context.createWordClause( token.image, field == null ? null : field.image );}finally{exitMethod();}
        }
    | 
    <INTEGER>
        { 
            try{return context.createIntegerClause( token.image, field == null ? null : field.image );}finally{exitMethod();}
        }
    | 
    <QUOTED_WORD>
        { 
            try{return context.createPhraseClause( token.image, field == null ? null : field.image );}finally{exitMethod();}
        }

}
