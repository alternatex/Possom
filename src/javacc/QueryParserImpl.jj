/** Copyright (2005-2006) Schibsted SÃ¸k AS **/
options {
  STATIC=false;
  JAVA_UNICODE_ESCAPE=true;
  LOOKAHEAD=2147483647;
}

PARSER_BEGIN(QueryParserImpl)

package no.schibstedsok.searchportal.query.parser;

import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import no.schibstedsok.searchportal.query.*;

/** This class is NOT synchronized. You must use a separate instance for each query. 
 *
 * @version $Id$
 * @author <a href="mailto:mick@wever.org>mick</a>
 **/
public final class QueryParserImpl extends AbstractQueryParser{

    public QueryParserImpl(final Context cxt){
        this(new StringReader(cxt.getQueryString()));
        context = cxt;
        //checks Query String is ok
        String qs = cxt.getQueryString();
        qs = balance(qs, '(', ')');
        qs = even(qs, '\"');
        qs = numberNeedsTrailingSpace(qs);
        token_source.SwitchTo(DEFAULT);
        //LOG.setLevel(org.apache.log4j.Level.TRACE);
    }

    public QueryParserImpl(final Context cxt, final int lexicalState){
        this(new StringReader(cxt.getQueryString()));
        context = cxt;
        token_source.SwitchTo(lexicalState);
    }

    private String balance(String query, final char leftChar, final char rightChar){
        int left = 0, right = 0;
        final char[] chars = query.toCharArray();
        for( int i = 0; i < chars.length; ++i ){ 
            if( chars[i] == leftChar ){ ++left; }
            if( chars[i] == rightChar ){ ++right; }
        }
        if( left != right ){
            // uneven amount of (). Ignore all of them then.
            query = query.replaceAll("\\" + leftChar, "").replaceAll("\\" + rightChar, "");
            ReInit(new StringReader(query));
        }
        return query;
    }

    private String even(String query, final char c){
        int count = 0;
        final char[] chars = query.toCharArray();
        for( int i = 0; i < chars.length; ++i ){ 
            if( chars[i] == c ){ ++count; }
        }
        if( count % 2 >0 ){
            // uneven amount of (). Ignore all of them then.    
            query = query.replaceAll("\\" + c, "");
            ReInit(new StringReader(query));
        }
        return query;
    }

    private String numberNeedsTrailingSpace(String query){
        
        // HACK because phone numbers and organisation numbers need to finish
        // with a space. SEARCH-672
        if( query.length() > 0 && Character.isDigit( query.charAt(query.length()-1) ) ){
            query = query + ' ';
            ReInit(new StringReader(query));
        }
        return query;
    }
}

PARSER_END(QueryParserImpl)

/** Skip these characters, they are considered "white space" 
 * See http://www.unicode.org/charts/ for unicode charts.
**/
<*>SKIP : {
      " " | "!" 
    | < [ "\u0023"-"\u0027" ] >
    | < [ "\u002a"-"\u002c" ] >
    | < [ "\u002e"-"\u002f" ] >
    | < [ "\u003b"-"\u0040" ] >
    | < [ "\u005b"-"\u0060" ] >
    | < [ "\u007b"-"\u00bf" ] >
    | < [ "\u00d7" ] >
    | < [ "\u00f7" ] >
}

/* These are the the above skip characters */
/* # % & ' */	
/* * + , */	
/* . / */
/* ; < = > ? @ */
/* [ \ ] ^ _ ` */

<DEFAULT,EMAIL_DISABLED,PHONE_NUMBER_DISABLED,NUMBER_GROUP_DISABLED,QUOTED_WORD_DISABLED>
TOKEN : { <URL: "http://"<WORD>> }

<DEFAULT,URL_DISABLED,PHONE_NUMBER_DISABLED,NUMBER_GROUP_DISABLED,QUOTED_WORD_DISABLED>
TOKEN : { <EMAIL: <WORD>"@"<WORD>"."<WORD>> }

// Very generic to match any Internation Phone Number !! Based off example from http://www.weberdev.com/ViewArticle/461
//   TODO deal with optional area codes. eg australian numbers can be written (02) 4878 9336
<DEFAULT,URL_DISABLED,EMAIL_DISABLED,QUOTED_WORD_DISABLED>
TOKEN : { <PHONE_NUMBER: (("+"|"00"(<PHONE_MIDDLE>)?)?((<DIGIT>){1,3}(<PHONE_MIDDLE>)?)?((<DIGIT>){1,5}(<PHONE_MIDDLE>)?){1,3})" "> }

// Also prevent organisation numbers when phone numbers are disabled. Prevents a cyclic loop.
<DEFAULT,URL_DISABLED,EMAIL_DISABLED,PHONE_NUMBER_DISABLED,QUOTED_WORD_DISABLED>
TOKEN : { <NUMBER_GROUP: (<DIGIT>(" ")+)+" "> }

<DEFAULT,URL_DISABLED,EMAIL_DISABLED,PHONE_NUMBER_DISABLED,NUMBER_GROUP_DISABLED>
TOKEN : { <QUOTED_WORD: "\"" (<WORD>|(<WORD_SEPARATOR>)+)* "\""> }


<*>TOKEN : {
      <AND: ("AND"|"+")>
    | <OR:  ("OR"|"|")>
    | <NOT: "NOT"|"-">              
    | <ANDNOT: ("ANDNOT")>
    | <INTEGER: ((<DIGIT>)+)>
    | <WORD: (<LETTER>|<DIGIT>|<WORD_SYMBOL_PREFIX>)(<LETTER>|<DIGIT>|<WORD_SYMBOL_MIDDLE>)*("*")?>
    | <FIELD_SUFFIX: ":">
        // remember to remove these when constructing the PhoneClause
    | <#PHONE_MIDDLE: ((" ")*<PHONE_SYMBOL>(" ")*)|(" ")+>
    | <#PHONE_SYMBOL: (".")|("-")|("/")>
    | <#WORD_SYMBOL_PREFIX: (".")|("<")|("=")|(">")>
    | <#WORD_SYMBOL_MIDDLE: (".")|("-")|("_")>
    | <#WORD_SEPARATOR: [ // just a copy of the SKIP declaration.
            " ", "!", 
            "\u0023"-"\u0040",
            "\u005b"-"\u0060",
            "\u007b"-"\u00bf",
            "\u00d7",
            "\u00f7"
        ]>
    | <#LETTER:
    /** UNICODE Characters **/
        [
            "\u0041"-"\u005a",
            "\u0061"-"\u007a",
            "\u00c0"-"\u00d6",
            "\u00d8"-"\u00f6",
            "\u00f8"-"\uffff"
        ]>
    | < #DIGIT:                      // unicode digits
          [
           "\u0030"-"\u0039",
           "\u0660"-"\u0669",
           "\u06f0"-"\u06f9",
           "\u0966"-"\u096f",
           "\u09e6"-"\u09ef",
           "\u0a66"-"\u0a6f",
           "\u0ae6"-"\u0aef",
           "\u0b66"-"\u0b6f",
           "\u0be7"-"\u0bef",
           "\u0c66"-"\u0c6f",
           "\u0ce6"-"\u0cef",
           "\u0d66"-"\u0d6f",
           "\u0e50"-"\u0e59",
           "\u0ed0"-"\u0ed9",
           "\u1040"-"\u1049"
          ]>
}

Clause parse() : { 
  Clause clause;
  LOG.info("parsing: "+context.getQueryString());
}{
        (clause = rootPrecedence()) {return clause;}        
}

/** PRECEDENCES **/

Clause rootPrecedence() :{
    Clause clause;
    enterMethod("rootPrecedence()");
}{
    (clause = noPrecedence()) { try{return clause;}finally{exitMethod();} }
}

Clause noPrecedence() :{
    Clause clause;
    enterMethod("noPrecedence()");
}{
    (clause = hiddenDefaultOperation()) { try{return clause;}finally{exitMethod();} }
    |
    (clause = looseJoinPrecedence()) { try{return clause;}finally{exitMethod();} }
    
}

Clause looseJoinPrecedence() :{
    Clause clause;
    enterMethod("looseJoinPrecedence()");
}{
    (clause = orOperation()) { try{return clause;}finally{exitMethod();} }  
    |
    (clause = strongJoinPrecedence()) { try{return clause;}finally{exitMethod();} } 
}

Clause strongJoinPrecedence() :{
    Clause clause;
    enterMethod("strongJoinPrecedence()");
}{
    (clause = andOperation()) { try{return clause;}finally{exitMethod();} }
    |
    (clause = leafPrecedence()) { try{return clause;}finally{exitMethod();} }
    

}

Clause leafPrecedence() :{
    Clause clause;
    enterMethod("leafPrecedence()");
}{
    (clause = notOperation()) { try{return clause;}finally{exitMethod();} }
    |
    (clause = andNotOperation()) { try{return clause;}finally{exitMethod();} }
    | 
    (clause = leaf()) { try{return clause;}finally{exitMethod();} }
}

/** OPERATIONS **/

DefaultOperatorClause hiddenDefaultOperation() :{
    Clause left,right;
    enterMethod("hiddenDefaultOperation()");
}{
    ((left = looseJoinPrecedence())(right = noPrecedence())) 
        { try{return context.createDefaultOperatorClause(left,right);}finally{exitMethod();} }
}


AndNotClause andNotOperation() :{
    Clause right;
    enterMethod("andNotOperation()");
}{
    (<ANDNOT>(right = noPrecedence())) { try{return context.createAndNotClause(right);}finally{exitMethod();} }
}  

Clause orOperation() :{
    Clause left,right;
    Clause clause;
    enterMethod("orOperation()");
}{
    ("("(clause = hiddenOrOperation())")") { try{return clause;}finally{exitMethod();} }
    |
    ((left = strongJoinPrecedence())<OR>(right = looseJoinPrecedence())) 
        { try{return context.createOrClause(left,right);}finally{exitMethod();} }
}

AndClause andOperation() :{
    Clause left,right;
    enterMethod("andOperation()");
}{
    ((left = leafPrecedence())<AND>(right = strongJoinPrecedence())) 
        { try{return context.createAndClause(left,right);}finally{exitMethod();} }
}

AndClause hiddenAndOperation() :{
    Clause left,right;
    enterMethod("hiddenAndOperation()");
}{
    ((left = leafPrecedence())(right = hiddenAndOperation())) 
        { try{return context.createAndClause(left,right);}finally{exitMethod();} }
    |
    ((left = leafPrecedence())(right = strongJoinPrecedence())) 
        { try{return context.createAndClause(left,right);}finally{exitMethod();} }
}

Clause hiddenOrOperation() :{
    Clause left,right;
    enterMethod("hiddenOrOperation()");
}{
    
    // These are the real hidden or operands
    ((left = leafPrecedence())(right = hiddenOrOperation())) 
        { try{return context.createOrClause(left,right);}finally{exitMethod();} }
    |
    ((left = strongJoinPrecedence())(right = looseJoinPrecedence())) 
        { try{return context.createOrClause(left,right);}finally{exitMethod();} }
    |
    // Not really an OR clause. Just () wrapped around something else. Therefore ignore the ()'s
    (left = leafPrecedence()) { try{return left;}finally{exitMethod();} }
    
}

NotClause notOperation() :{
    Clause left;
    enterMethod("notOperation()");
}{
    (<NOT>(left = leaf()))  { try{return context.createNotClause(left);}finally{exitMethod();} }
}


/** LEAVES **/

Clause leaf() :{
    Token field = null;
    Clause clause, left, right = null;
    enterMethod("leaf()");
}{
    // A real field
    ((field=<WORD>)<FIELD_SUFFIX>)(clause = fieldedLeaf(field)) {try{return clause;}finally{exitMethod();}}
    |
    // An accidential field. 
    // XXX This could cause problems as it destroys the construction of a right-leaning forests.
    (left = fieldedLeaf(null)<FIELD_SUFFIX>)(right = fieldedLeaf(null)) 
        {try{return context.createDefaultOperatorClause(left,right);}finally{exitMethod();}}
    |
    (clause = fieldedLeaf(null)) {try{return clause;}finally{exitMethod();}}
}
    

Clause fieldedLeaf(final Token field) :{
    enterMethod("fieldedLeaf()");
}{
    (<PHONE_NUMBER>) 
        { 
            try{
                // remove the PHONE_SYMBOL sub-tokens
                final String term = token.image.replaceAll("\\.|-|/| ","");
                final String f = field == null ? null : field.image;
                final PhoneNumberClause phClause = context.createPhoneNumberClause(term, f);

                // Create a XorClause
                final QueryParserImpl p = new QueryParserImpl(createContext(token.image), PHONE_NUMBER_DISABLED);
                final Clause altClause = p.parse();
                return context.createXorClause(phClause, altClause, XorClause.PHONE_NUMBER_ON_LEFT);

            }finally{exitMethod();}
        }
    | 
    (<NUMBER_GROUP>) 
        { 
            try{
                // Remove whitespace
                final String term = token.image.trim().replaceAll(" ","");
                final String f = field == null ? null : field.image;
                final NumberGroupClause orgClause = context.createNumberGroupClause(term, f);

                // Create a XorClause
                final QueryParserImpl p = new QueryParserImpl(createContext(token.image), NUMBER_GROUP_DISABLED);
                final Clause altClause = p.parse();
                return context.createXorClause(orgClause, altClause, XorClause.NUMBER_GROUP_ON_LEFT);

            }finally{exitMethod();}
        }
    |
    <QUOTED_WORD>
        { 
            try{
                final String f = field == null ? null : field.image;
                final PhraseClause phClause = context.createPhraseClause(token.image, f );

                // Create a XorClause
                final String term = token.image.trim().replaceAll("\"","");
                final QueryParserImpl p = new QueryParserImpl(createContext(term), QUOTED_WORD_DISABLED);
                final Clause altClause = p.parse();
                return context.createXorClause(phClause, altClause, XorClause.PHRASE_ON_LEFT);

            }finally{exitMethod();}
        }
    | 
    <WORD>
        { 
            try{
                final String f = field == null ? null : field.image;
                return context.createWordClause(token.image, f);

            }finally{exitMethod();}
        }
    | 
    <INTEGER>
        { 
            try{
                final String f = field == null ? null : field.image;
                return context.createIntegerClause(token.image, f);

            }finally{exitMethod();}
        }
    |
    <URL>
        { 
            try{
                final String f = field == null ? null : field.image;
                return context.createUrlClause(token.image, f);

            }finally{exitMethod();}
        }
    | 
    <EMAIL>
        { 
            try{
                final String f = field == null ? null : field.image;
                return context.createEmailClause(token.image, f);

            }finally{exitMethod();}
        }

}
