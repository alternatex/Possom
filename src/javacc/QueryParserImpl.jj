/** Copyright (2005-2006) Schibsted SÃ¸k AS **/
options {
  STATIC=false;
  JAVA_UNICODE_ESCAPE=true;
}

PARSER_BEGIN(QueryParserImpl)

package no.schibstedsok.front.searchportal.query.parser;

import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import no.schibstedsok.front.searchportal.analyzer.TokenEvaluatorFactory;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/** This class is NOT synchronized. You must use a separate instance for each query. **/
public final class QueryParserImpl extends AbstractQueryParser{

    public QueryParserImpl(final Context cxt){
        this(new StringReader(cxt.getQueryString()));
        context = cxt;
    }
}

PARSER_END(QueryParserImpl)

/** Skip these characters, they are considered "white space" **/
SKIP : {
    ","
    | "."    
    | "#"
    | " "
    | "\t"
    | "\r"
    | "\n"
}

TOKEN : {
/** Find operators first **/
  <AND: ("AND"|"+")>
| <OR:  ("OR"|"|")>
| <NOT: "NOT">              // choosing to identify "-" as the ANDNOT operator instead of the NOT operator.
| <ANDNOT: ("ANDNOT"|"-")>
/** then leaves **/
| <INTEGER: ((<DIGIT>)+)>
| <WORD: ((<LETTER>|<DIGIT>)+)>
| <QUOTED_WORD: "\"" (<WORD>|(" ")+)* "\"">
| <#LETTER:
/** UNICODE Characters **/
    [
        "\u0041"-"\u005a",
        "\u0061"-"\u007a",
        "\u00c0"-"\u00d6",
        "\u00d8"-"\u00f6",
        "\u00f8"-"\u00ff",
        "\u0100"-"\u1fff"
    ]
    >
| < #DIGIT:                                       // unicode digits
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

Clause parse() : 
{ 
  Clause clause;
  LOG.info("parsing: "+context.getQueryString());
}
{
        (clause = clause()) {return clause;}
}

Clause clause() : 
{ 
  Clause left, right;
}
{
    
    LOOKAHEAD(2)
        (left = operation()) {return left;}
    |
    /** Hidden|Unspecified OrClauses **/
    LOOKAHEAD(2)
        ((left = leaf())(right = clause())) {return new OrClause(left,right);}
    |
    (left = leaf())  {return left;}
}

Clause operation() :
{
    LeafClause left;
    Clause right;
}
{
    (<NOT>(right = leaf())) { return new NotClause(right);}
    | 
    LOOKAHEAD(2)
        ((left = leaf())<AND>(right = clause())) { return new AndClause(left,right);}

    | 
    LOOKAHEAD(2) 
        ((left = leaf())<OR>(right = clause())) { return new OrClause(left,right);}

    |
    LOOKAHEAD(2)
        ((left = leaf())<ANDNOT>(right = clause())) { return new AndNotClause(left,right);}
} 

LeafClause leaf() :
{
    Token field = null;
}
{
    ([LOOKAHEAD(2)
        (field=<WORD>":")]<WORD>) 
            { 
                return context.createWordClause(
                    token.image,
                    field!=null ? field.image : null ) ;
            }
    | 
    (<INTEGER>) 
            { 
                return context.createIntegerClause(
                    token.image,
                    field!=null ? field.image : null ) ;
            }
    | 
    (<QUOTED_WORD>) 
            { 
                return context.createPhraseClause(
                    token.image.replaceAll("\"",""),
                    field!=null ? field.image : null ) ;
            }
}
